{
  "version": 3,
  "sources": ["../src/rammerhead-browser.ts"],
  "sourcesContent": ["function RammerheadEncode(baseUrl: any, prefix?: string) {\n  const mod = (n: any, m: any) => ((n % m) + m) % m;\n  const baseDictionary =\n    \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz~-\";\n  const shuffledIndicator = \"_rhs\";\n  const generateDictionary = function () {\n    let str = \"\";\n    const split = baseDictionary.split(\"\");\n    while (split.length > 0) {\n      str += split.splice(Math.floor(Math.random() * split.length), 1)[0];\n    }\n    return str;\n  };\n  interface StrShuffler {\n    dictionary: any;\n  }\n  class StrShuffler {\n    constructor(dictionary = generateDictionary()) {\n      this.dictionary = dictionary;\n    }\n    shuffle(str: any) {\n      if (str.startsWith(shuffledIndicator)) {\n        return str;\n      }\n      let shuffledStr = \"\";\n      for (let i = 0; i < str.length; i++) {\n        const char = str.charAt(i);\n        const idx = baseDictionary.indexOf(char);\n        if (char === \"%\" && str.length - i >= 3) {\n          shuffledStr += char;\n          shuffledStr += str.charAt(++i);\n          shuffledStr += str.charAt(++i);\n        } else if (idx === -1) {\n          shuffledStr += char;\n        } else {\n          shuffledStr += this.dictionary.charAt(\n            mod(idx + i, baseDictionary.length)\n          );\n        }\n      }\n      return shuffledIndicator + shuffledStr;\n    }\n    unshuffle(str: any) {\n      if (!str.startsWith(shuffledIndicator)) {\n        return str;\n      }\n\n      str = str.slice(shuffledIndicator.length);\n\n      let unshuffledStr = \"\";\n      for (let i = 0; i < str.length; i++) {\n        const char = str.charAt(i);\n        const idx = this.dictionary.indexOf(char);\n        if (char === \"%\" && str.length - i >= 3) {\n          unshuffledStr += char;\n          unshuffledStr += str.charAt(++i);\n          unshuffledStr += str.charAt(++i);\n        } else if (idx === -1) {\n          unshuffledStr += char;\n        } else {\n          unshuffledStr += baseDictionary.charAt(\n            mod(idx - i, baseDictionary.length)\n          );\n        }\n      }\n      return unshuffledStr;\n    }\n  }\n  function get(url: any, callback: any, shush = false) {\n    var request = new XMLHttpRequest();\n    request.open(\"GET\", url, true);\n    request.send();\n\n    request.onerror = function () {\n      if (!shush) console.log(\"Cannot communicate with the server\");\n    };\n    request.onload = function () {\n      if (request.status === 200) {\n        callback(request.responseText);\n      } else {\n        if (!shush)\n          console.log(\n            'unexpected server response to not match \"200\". Server says \"' +\n              request.responseText +\n              '\"'\n          );\n      }\n    };\n  }\n  var api = {\n    newsession(callback: any) {\n        if (prefix) {\n            get(prefix + \"/newsession\", callback);\n        }\n        else {\n            get(\"/newsession\", callback);\n        }\n    },\n    sessionexists(id: any, callback: any) {\n        if (prefix) {\n            get(prefix + \"/sessionexists?id=\" + encodeURIComponent(id), function (res: any) {\n                if (res === \"exists\") return callback(true);\n                if (res === \"not found\") return callback(false);\n                console.log(\"unexpected response from server. received\" + res);\n            });\n        }\n        else {\n            get(\"/sessionexists?id=\" + encodeURIComponent(id), function (res: any) {\n                if (res === \"exists\") return callback(true);\n                if (res === \"not found\") return callback(false);\n                console.log(\"unexpected response from server. received\" + res);\n            });\n        }\n    },\n    shuffleDict(id: any, callback: any) {\n      console.log(\"Shuffling\", id);\n      if (prefix) {\n        get(prefix + \"/api/shuffleDict?id=\" + encodeURIComponent(id), function (res: any) {\n            callback(JSON.parse(res));\n        });\n      }\n      else {\n        get(\"/api/shuffleDict?id=\" + encodeURIComponent(id), function (res: any) {\n            callback(JSON.parse(res));\n        });\n      }\n    }\n  };\n  var localStorageKey = \"rammerhead_sessionids\";\n  var localStorageKeyDefault = \"rammerhead_default_sessionid\";\n  var sessionIdsStore = {\n    get() {\n      var rawData = localStorage.getItem(localStorageKey);\n      if (!rawData) return [];\n      try {\n        var data = JSON.parse(rawData);\n        if (!Array.isArray(data)) throw \"getout\";\n        return data;\n      } catch (e) {\n        return [];\n      }\n    },\n    set(data: any) {\n      if (!data || !Array.isArray(data)) throw new TypeError(\"must be array\");\n      localStorage.setItem(localStorageKey, JSON.stringify(data));\n    },\n    getDefault() {\n      var sessionId = localStorage.getItem(localStorageKeyDefault);\n      if (sessionId) {\n        var data = sessionIdsStore.get();\n        data.filter(function (e) {\n          return e.id === sessionId;\n        });\n        if (data.length) return data[0];\n      }\n      return null;\n    },\n    setDefault(id: any) {\n      localStorage.setItem(localStorageKeyDefault, id);\n    }\n  };\n  function addSession(id: any) {\n    var data = sessionIdsStore.get();\n    data.unshift({ id: id, createdOn: new Date().toLocaleString() });\n    sessionIdsStore.set(data);\n  }\n  function getSessionId() {\n    return new Promise((resolve) => {\n      var id = localStorage.getItem(\"session-string\");\n      api.sessionexists(id, function (value: any) {\n        if (!value) {\n          console.log(\"Session validation failed\");\n          api.newsession(function (id: any) {\n            addSession(id);\n            localStorage.setItem(\"session-string\", id);\n            console.log(id);\n            console.log(\"^ new id\");\n            resolve(id);\n          });\n        } else {\n          resolve(id);\n        }\n      });\n    });\n  }\n  var ProxyHref;\n\n  return getSessionId().then((id) => {\n    return new Promise((resolve, reject) => {\n      api.shuffleDict(id, function (shuffleDict: any) {\n        var shuffler = new StrShuffler(shuffleDict);\n        if (prefix) {\n            ProxyHref = prefix + \"/\" + id + \"/\" + shuffler.shuffle(baseUrl);\n        }\n        else { ProxyHref = id + \"/\" + shuffler.shuffle(baseUrl); }\n        console.log(ProxyHref);\n        resolve(ProxyHref);\n      });\n    });\n  });\n}\n\n//@ts-ignore\nwindow.RammerheadEncode = RammerheadEncode;\n"],
  "mappings": "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",
  "names": ["RammerheadEncode", "baseUrl", "prefix", "mod", "m", "baseDictionary", "shuffledIndicator", "generateDictionary", "str", "split", "StrShuffler", "dictionary", "shuffledStr", "i", "char", "idx", "unshuffledStr", "get", "url", "callback", "shush", "request", "api", "id", "res", "localStorageKey", "localStorageKeyDefault", "sessionIdsStore", "rawData", "data", "e", "sessionId", "addSession", "getSessionId", "resolve", "value", "ProxyHref", "reject", "shuffleDict", "shuffler"]
}
